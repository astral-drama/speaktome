[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "speaktome"
version = "1.0.0"
description = "A modern web-based voice-to-text system built with functional architecture, featuring GPU-accelerated transcription and real-time audio processing through a browser interface."
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Seth", email = "seth@example.com"},
]
keywords = ["voice-to-text", "transcription", "whisper", "fastapi", "websockets", "gpu"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "openai-whisper>=20231117",
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "aiofiles>=23.0.0",
    "python-multipart>=0.0.6",
    "websockets>=11.0.0",
    "numpy>=1.24.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
]
web = [
    "pyaudio>=0.2.11",
    "pynput>=1.7.6",
    "python-xlib>=0.31",
    "keyboard>=0.13.5",
]

[project.scripts]
speaktome = "speaktome.start_server:main"

[project.urls]
Homepage = "https://github.com/seth/speaktome"
Repository = "https://github.com/seth/speaktome"
Issues = "https://github.com/seth/speaktome/issues"

[tool.setuptools.packages.find]
include = ["speaktome*", "server*", "client*"]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["B011"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["speaktome", "server"]
omit = ["tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]